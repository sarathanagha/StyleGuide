/// <disable>JS2027,JS2073,JS2074</disable>
// Translates .resx files to a requireJS i18n compatible file structure.
// Example usage: node.exe translate-resx.js path/to/resource/files path/to/bundle/manifest

+function () {
    "use strict";

    var fs = require("fs");
    var path = require("path");
    var exec = require('child_process').exec;

    if (process.argv.length < 4) {
        throw "ResourceDirectory and BundleManifestLocation must be specified parameters";
    }

    var outputHeader = "//------------------------------------------------------------------------------\r\n" +
                       "// <auto-generated>\r\n" +
                       "//     This code was generated by a tool.\r\n" +
                       "//\r\n" +
                       "//     Changes to this file may cause incorrect behavior and will be lost if\r\n" +
                       "//     the code is regenerated.\r\n" +
                       "// </auto-generated>\r\n" +
                       "//------------------------------------------------------------------------------\r\n\r\n";

    var resourceDirectory = process.argv[2];
    var bundleManifestLocation = process.argv[3];
    var updateDefinitionFile = (process.argv[4] === "1");

    // Prep directory
    var bundleManifestDirectory = path.dirname(bundleManifestLocation);
    var bundleName = path.basename(bundleManifestLocation);

    if (!fs.existsSync(bundleManifestDirectory)) {
        fs.mkdirSync(bundleManifestDirectory);
    }

    var manifest = {};
    if (fs.existsSync(bundleManifestLocation)) {
        var contents = fs.readFileSync(bundleManifestLocation, { encoding: "utf8" });
        var json = contents.replace(/.*[\s\S]*?define\(/, "").replace(/\);\s*$/, "");
        manifest = JSON.parse(json);
    }

    var resourceFileNames = fs.readdirSync(resourceDirectory).filter(function (fn) { return /\.json/.test(fn); });
    resourceFileNames.forEach(function (fileName) {
        var filePath = path.join(resourceDirectory, fileName);
        var resourceObject = require("./" + filePath);

        var nameParts = fileName.split(".");
        var locale = "root";
        if (nameParts.length > 2) {
            locale = (nameParts[nameParts.length - 2] || "").toLowerCase();
        }

        // Update manifest
        manifest[locale] = true;

        if (!fs.existsSync(path.join(bundleManifestDirectory, locale))) {
            fs.mkdirSync(path.join(bundleManifestDirectory, locale));
        }
        fs.writeFileSync(path.join(bundleManifestDirectory, locale, bundleName), outputHeader + "define(" + JSON.stringify(resourceObject, null, 4) + ");");

        // Auto generate the resx.d.ts file as needed rather than editing by hand
        if (updateDefinitionFile) {
            var str = "// ALERT: THIS IS A GENERATED FILE, PLEASE DON'T EDIT THIS. EDIT DataCatalog\\resources\\Strings.json INSTEAD\n";
            str += "module Microsoft.DataStudio.DataCatalog.Core {\n";
            str += "\texport interface IResx {\n";
            Object.keys(resourceObject).sort().forEach(function (key) {
                if (!/\s/.test(key)) {
                    str += "\t\t" + key + ": string;\r\n";
                }
            });
            str += "\t}\n";
            str += "}";
            fs.writeFileSync("bin/IResx.ts", str);
        }
    });

    // Update manifest
    fs.writeFileSync(bundleManifestLocation, outputHeader + "define(" + JSON.stringify(manifest, null, 4) + ");");
}();